# /data/data/com.termux/files/usr/bin/bash

# Detect if running in Termux (Android environment)
IS_TERMUX=false
if [ -n "$PREFIX" ] && [ "$PREFIX" = "/data/data/com.termux/files/usr" ]; then
    IS_TERMUX=true
fi

# Detect package manager: prefer Termux 'pkg', fallback to standard 'apt'
if command -v pkg >/dev/null 2>&1; then
    PKG_CMD="pkg"
elif command -v apt >/dev/null 2>&1; then
    PKG_CMD="apt"
else
    echo "[ERROR] This script must be run inside Termux (Android) or a Linux environment with 'apt' or 'pkg' available."
    echo "Exiting. Please run this script in a Termux or apt-based environment."
    exit 1
fi

# Helper to run package manager with sudo if needed
run_pkg_cmd() {
    local cmd="$1"
    shift
    if [ "$PKG_CMD" = "apt" ] && [ "$(id -u)" != "0" ]; then
        sudo apt $cmd "$@"
    else
        $PKG_CMD $cmd "$@"
    fi
}

# Display current UTC date and time in specified format
echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): $(date -u "+%Y-%m-%d %H:%M:%S")"

echo "Current User's Login: $(whoami)"

# Function to get Termux-specific user information
get_user_info() {
    TERMUX_USERNAME="$USER"
    USER_HOME="$HOME"
    IS_SUDO=false
    if [ "$(id -u)" = "0" ]; then
        IS_SUDO=true
    fi
    USER_GROUPS=$(groups)
    echo "System Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Current Date/Time (UTC): $(date -u "+%Y-%m-%d %H:%M:%S")"
    echo "Username: $TERMUX_USERNAME"
    echo "Home Directory: $USER_HOME"
    echo "Root Access: $IS_SUDO"
    echo "User Groups: $USER_GROUPS"
    echo "Terminal: $TERM"
    echo "Shell: $SHELL"
    if [ -f "$PREFIX/etc/motd" ]; then
        echo "Termux Version: $(grep -o 'Welcome to Termux.*' $PREFIX/etc/motd | cut -d' ' -f4)"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display environment info for VM
display_environment() {
    echo "VM/Environment Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "OS: $(uname -o 2>/dev/null || uname -s)"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "CPU Info:"
    grep -m 1 'model name' /proc/cpuinfo 2>/dev/null || echo "N/A"
    echo "Memory Info:"
    grep MemTotal /proc/meminfo 2>/dev/null || echo "N/A"
    echo "Virtualization Check:"
    if grep -q -i 'hypervisor' /proc/cpuinfo 2>/dev/null; then
        echo "Running inside a VM (hypervisor detected)"
    else
        echo "No hypervisor detected"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display configuration and auto-setup
display_config() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Root Security Tool Installer Configuration"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "User: $(whoami)"
    echo "User ID: $(id -u)"
    echo "Groups: $(groups)"
    echo "Home: $HOME"
    echo "Shell: $SHELL"
    echo "Termux: $([ -n \"$PREFIX\" ] && echo 'Yes' || echo 'No')"
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "OS: $PRETTY_NAME"
    elif [ -f /system/build.prop ]; then
        echo "OS: Android (detected via build.prop)"
    else
        echo "OS: Unknown"
    fi
    echo "Kali OS Display: $([ -d $HOME/kalifs-arm64 ] && echo 'Installed' || echo 'Not Installed')"
    echo "Root Bypass: $([ \"$(id -u)\" = \"0\" ] && echo 'Not Needed' || echo 'Enabled (using proot/fake root)')"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to auto-configure sudo/proot if needed
auto_setup_root_bypass() {
    if [ "$(id -u)" != "0" ]; then
        echo "Non-root user detected. Setting up root bypass (proot)..."
        run_pkg_cmd install proot -y
        mkdir -p $HOME/.termux/boot
        cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF
        cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF
        chmod +x $HOME/.termux/boot/*.sh
        echo "Root bypass setup complete."
    else
        echo "Root user detected. No root bypass needed."
    fi
}

# Function to alter Termux display to show Kali OS and architecture (32-bit or 64-bit)
alter_termux_display_kali() {
    local arch
    arch=$(uname -m)
    if [ -d "$HOME/kalifs-arm64" ] || [ -d "$HOME/kalifs-armhf" ]; then
        if [[ "$arch" == *"armv7"* || "$arch" == *"armhf"* || "$arch" == *"i686"* ]]; then
            echo "Kali Linux detected in Termux. Altering display to 32-bit..."
            echo "Welcome to Kali Linux 32-bit (via Termux)" > $HOME/.termux/motd
        else
            echo "Kali Linux detected in Termux. Altering display to 64-bit..."
            echo "Welcome to Kali Linux 64-bit (via Termux)" > $HOME/.termux/motd
        fi
    fi
}

# Helper function for safe git clone with error handling
safe_git_clone() {
    local repo_url="$1"
    local dest_dir="$2"
    if [ -d "$dest_dir" ]; then
        echo "Directory $dest_dir already exists, skipping clone."
    else
        git clone --depth 1 "$repo_url" "$dest_dir"
        if [ $? -ne 0 ]; then
            echo "Error cloning $repo_url to $dest_dir. Check your network or storage space."
        else
            echo "Cloned $repo_url to $dest_dir."
        fi
    fi
}

# Helper function for safe pip install (prefer python3/pip3 on Linux)
safe_pip_install() {
    local pkg="$1"
    if command -v pip3 >/dev/null 2>&1; then
        pip3 install "$pkg"
    elif command -v pip >/dev/null 2>&1; then
        pip install "$pkg"
    else
        echo "Error: pip or pip3 not found for installing $pkg"
        return 1
    fi
    if [ $? -ne 0 ]; then
        echo "Error installing Python package: $pkg"
    else
        echo "Python package $pkg installed."
    fi
}

# Helper function for safe gem install
safe_gem_install() {
    gem install "$1"
    if [ $? -ne 0 ]; then
        echo "Error installing Ruby gem: $1"
    else
        echo "Ruby gem $1 installed."
    fi
}

# Function to install more exploits, tools, and gems with error handling
install_more_exploits_tools_gems() {
    echo "Installing more exploits, tools, and gems with improved error handling..."

    # Exploits & tools
    run_pkg_cmd install git python ruby -y

    safe_git_clone https://github.com/vanhauser-thc/thc-hydra.git $HOME/thc-hydra
    safe_git_clone https://github.com/DanMcInerney/packet-sender.git $HOME/packet-sender
    safe_git_clone https://github.com/m4ll0k/WAScan.git $HOME/WAScan
    safe_git_clone https://github.com/sqlmapproject/sqlmap.git $HOME/sqlmap
    safe_git_clone https://github.com/PowerShellMafia/PowerSploit.git $HOME/PowerSploit
    safe_git_clone https://github.com/1N3/enum4linux.git $HOME/enum4linux
    safe_git_clone https://github.com/Greenwolf/ntlm_theft.git $HOME/ntlm_theft
    safe_git_clone https://github.com/byt3bl33d3r/CrackMapExec.git $HOME/CrackMapExec

    # Python tools
    safe_pip_install wafw00f
    safe_pip_install shodan
    safe_pip_install theHarvester
    safe_pip_install impacket

    # Ruby gems
    safe_gem_install bundler
    safe_gem_install msfrpc-client
    safe_gem_install snmp
    safe_gem_install net-ssh
    safe_gem_install net-scp
    safe_gem_install sinatra
    safe_gem_install httparty

    echo "Checking and fixing display issues..."
    if [ ! -d "$HOME/.termux" ]; then
        mkdir -p "$HOME/.termux"
    fi
    if [ ! -f "$HOME/.termux/motd" ]; then
        echo "Welcome to your enhanced Termux environment!" > "$HOME/.termux/motd"
    fi

    echo "If you experience issues, try running: termux-reload-settings"
    echo "If a tool fails to run, check for missing dependencies and rerun the installer."
    echo "Installation and setup complete with improved error handling."
}

# Function to install even more exploits, tools, and gems
install_even_more_tools_exploits_gems() {
    echo "Installing even more tools, exploits, and Ruby gems..."
    # More exploits/tools
    safe_git_clone https://github.com/rebootuser/LinEnum.git $HOME/LinEnum
    safe_git_clone https://github.com/carlospolop/PEASS-ng.git $HOME/PEASS-ng
    safe_git_clone https://github.com/Dionach/CMSmap.git $HOME/CMSmap
    safe_git_clone https://github.com/1N3/Sn1per.git $HOME/Sn1per
    safe_git_clone https://github.com/epi052/feroxbuster.git $HOME/feroxbuster
    safe_git_clone https://github.com/EmpireProject/Empire.git $HOME/Empire
    safe_git_clone https://github.com/dirkjanm/mitm6.git $HOME/mitm6
    safe_git_clone https://github.com/lgandx/Responder.git $HOME/Responder
    safe_git_clone https://github.com/0xInfection/Awesome-WAF.git $HOME/Awesome-WAF
    safe_git_clone https://github.com/DominicBreuker/pspy.git $HOME/pspy
    safe_git_clone https://github.com/OJ/gobuster.git $HOME/gobuster
    safe_git_clone https://github.com/BloodHoundAD/BloodHound.git $HOME/BloodHound
    safe_git_clone https://github.com/byt3bl33d3r/CrackMapExec.git $HOME/CrackMapExec
    safe_git_clone https://github.com/CiscoCXSecurity/enum4linux.git $HOME/enum4linux
    safe_git_clone https://github.com/PowerShellMafia/PowerSploit.git $HOME/PowerSploit
    safe_git_clone https://github.com/PowerShellEmpire/PowerTools.git $HOME/PowerTools
    safe_git_clone https://github.com/HarmJ0y/PowerUp.git $HOME/PowerUp
    safe_git_clone https://github.com/ropnop/kerbrute.git $HOME/kerbrute
    safe_git_clone https://github.com/nidem/kerberoast.git $HOME/kerberoast
    safe_git_clone https://github.com/GhostPack/Rubeus.git $HOME/Rubeus
    safe_git_clone https://github.com/BloodHoundAD/SharpHound.git $HOME/SharpHound
    # Python tools
    safe_pip_install mitm6
    safe_pip_install feroxbuster
    safe_pip_install CMSmap
    # Ruby gems
    safe_gem_install evil-winrm
    safe_gem_install evil-ssdp
    safe_gem_install evilscan
    safe_gem_install evilpdf
    safe_gem_install evilclippy
    safe_gem_install evilprank
    safe_gem_install evilproxy
    safe_gem_install evilginx2
    safe_gem_install evilgrade
    safe_gem_install evilosx
    safe_gem_install evilurl
    safe_gem_install evilfoca
    safe_gem_install evil-dns
    safe_gem_install bloodhound
    safe_gem_install gobuster
    safe_gem_install sn1per
    safe_gem_install peass
    safe_gem_install linenum
    safe_gem_install empire
    safe_gem_install responder
    safe_gem_install awesome-waf
    echo "Even more tools, exploits, and gems installed."
}

# Function to display available commands
show_commands() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Available Commands:"
    echo "  show_commands                - Display this command list"
    echo "  get_user_info                - Show Termux user info"
    echo "  display_environment          - Show VM/environment info"
    echo "  display_config               - Show installer config"
    echo "  auto_setup_root_bypass       - Setup root bypass if needed"
    echo "  alter_termux_display_kali    - Show Kali OS in Termux MOTD"
    echo "  setup_test_environment       - Setup secondary test environment"
    echo "  install_exploit_tools        - Install extra exploit tools"
    echo "  install_security_gems        - Install extra Ruby security gems"
    echo "  install_superuser_tools      - Install superuser/rooting tools"
    echo "  mk_user_rootsuperuser        - Create root superuser environment"
    echo "  ensure_rootsuperuser_access  - Test and ensure root/superuser access"
    echo "  auto_configure_advanced_user - Auto-configure user and grant advanced access"
    echo "  install_web_tools            - Install web security tools"
    echo "  install_android_tools        - Install Android/mobile security tools"
    echo "  install_password_crackers    - Install password cracking tools"
    echo "  install_network_tools        - Install network analysis tools"
    echo "  install_fuzzing_tools        - Install fuzzing tools"
    echo "  install_enum_tools           - Install enumeration tools"
    echo "  install_extra_gems           - Install more Ruby gems"
    echo "  install_more_exploits_tools_gems - Install more exploits, tools, and gems with error handling"
    echo "  install_even_more_tools_exploits_gems - Install even more exploits, tools, and gems"
    echo "  show_linenum                        - Show LinEnum usage/help"
    echo "  show_peass                           - Show PEASS-ng usage/help"
    echo "  show_cmsmap                          - Show CMSmap usage/help"
    echo "  show_sn1per                          - Show Sn1per usage/help"
    echo "  show_feroxbuster                     - Show feroxbuster usage/help"
    echo "  show_mitm6                            - Show mitm6 usage/help"
    echo "  show_responder                        - Show Responder usage/help"
    echo "  show_awesome_waf                     - Show Awesome-WAF usage/help"
    echo "  show_empire                          - Show Empire usage/help"
    echo "  show_exploitdb                       - Show ExploitDB usage/help"
    echo "  show_pspy                            - Show pspy usage/help"
    echo "  show_gobuster                        - Show Gobuster usage/help"
    echo "  show_bloodhound                      - Show BloodHound usage/help"
    echo "  show_crackmapexec                   - Show CrackMapExec usage/help"
    echo "  show_enum4linux                     - Show enum4linux usage/help"
    echo "  show_powerup                         - Show PowerUp usage/help"
    echo "  show_powersploit                     - Show PowerSploit usage/help"
    echo "  show_kerbrute                        - Show Kerbrute usage/help"
    echo "  show_kerberoast                     - Show Kerberoast usage/help"
    echo "  show_rubeus                          - Show Rubeus usage/help"
    echo "  show_sharphound                     - Show SharpHound usage/help"
    echo "  show_impacket                        - Show Impacket usage/help"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to install extra exploit tools
install_exploit_tools() {
    echo "Installing ExploitDB SearchSploit..."
    run_pkg_cmd install git -y && git clone https://github.com/offensive-security/exploitdb.git && cd exploitdb && git clone https://github.com/offensive-security/searchsploit.git
    echo "Installing sqlninja (SQL Server exploit)..."
    run_pkg_cmd install git -y && git clone https://github.com/xxgrunge/sqlninja.git
    echo "Installing Routersploit (exploit framework)..."
    run_pkg_cmd install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
    echo "Installing Commix (Automated Command Injection)..."
    run_pkg_cmd install git python -y && git clone https://github.com/commixproject/commix.git
    echo "Installing BeEF XSS Framework..."
    run_pkg_cmd install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
    echo "Installing Zphisher (Phishing toolkit)..."
    run_pkg_cmd install git php openssh -y && git clone https://github.com/htr-tech/zphisher.git
    echo "Exploit tools installation complete."
}

# Function to install extra Ruby security gems
install_security_gems() {
    echo "Installing Metasploit Community Gems..."
    run_pkg_cmd install ruby -y
    safe_gem_install rex
    safe_gem_install msfrpc-client
    safe_gem_install metasploit_data_models
    echo "Installing Wpscan (WordPress vulnerability scanner)..."
    safe_gem_install wpscan
    echo "Installing Arachni (web app security scanner)..."
    safe_gem_install arachni
    echo "Installing Nokogiri (Ruby gem for parsing HTML/XML)..."
    safe_gem_install nokogiri
    # Additional security, networking, and utility gems
    echo "Installing additional Ruby gems for security and automation..."
    local gems=(
        net-ssh net-scp net-telnet net-http net-ping net-dns net-ldap net-sftp netaddr
        snmp snmp4em snmp2
        mechanize curb httparty rest-client typhoeus excon em-http-request
        json yajl multi_json oj crack
        colorize rainbow paint term-ansicolor lolcat
        highline tty-prompt tty-table tty-spinner tty-command
        thor rake rspec minitest cucumber aruba
        pry pry-byebug pry-remote pry-doc
        sinatra padrino rails sequel activerecord sqlite3 pg mysql2 mongo mongoid
        eventmachine celluloid concurrent-ruby
        rubyzip archive-zip rubyXL spreadsheet roo
        xml-simple xmlrpc soap4r gyoku savon
        whois dnsruby geoip geoip2
        rmagick chunky_png mini_magick
        faker ffaker factory_bot
        parallel parallel_tests
        bindata packetfu pcaprub
        metasploit-framework
        metasploit_data_models
        msfrpc-client
        evil-winrm evil-ssdp evilscan evilpdf evilclippy evilprank evilproxy evilginx2 evilgrade evilosx evilurl evilfoca evil-dns
        addressable anemone awesome_print bcrypt bcrypt_pbkdf bcrypt-ruby bindata bit-struct browser capybara charlock_holmes chronic clipboard coderay crack curb daemons data_mapper diff-lcs docile domain_name em-websocket equalizer erubis eventmachine faker faraday ffi fileutils fog formatador geocoder hashie htmlentities http-cookie http-form_data http_parser.rb i18n json_pure jwt kramdown launchy libv8 lru_redux mail mime-types mini_portile2 mini_racer mustermann net-http-persistent net-http2 net-imap net-pop net-smtp netrc nokogumbo oauth2 oj open4 open-uri-cached openssl optimist ox parseconfig pdf-reader pg plist polyglot progressbar puma rack rack-protection rack-test rails-html-sanitizer rainbow rake rb-inotify rdoc redcarpet redis ref regex ruby-progressbar ruby_parser rubyzip sass scss-lint sequel simplecov sinatra-contrib slop sqlite3 sys-uname temple thin thor tilt timers treetop tzinfo unf unicorn uuidtools websocket-driver websocket-extensions xml-simple xmlrpc yard zliby
    )
    for gem in "${gems[@]}"; do
        safe_gem_install "$gem"
    done
    echo "Ruby security gems installation complete."
}

# Function to install superuser/rooting tools for Termux
install_superuser_tools() {
    if [ "$IS_TERMUX" = true ]; then
        echo "Installing Termux superuser/rooting tools..."
        run_pkg_cmd install tsu -y

        # Install Termux Sudo
        run_pkg_cmd install git ncurses-utils -y
        git clone https://gitlab.com/st42/termux-sudo.git $HOME/termux-sudo
        cp $HOME/termux-sudo/sudo /data/data/com.termux/files/usr/bin/sudo
        chmod 700 /data/data/com.termux/files/usr/bin/sudo

        # Install suroot (Termux SU)
        git clone https://github.com/MasterDevX/Termux-SU $HOME/Termux-SU
        bash $HOME/Termux-SU/install.sh

        # Install MagiskHide Props Config (root bypass)
        git clone https://github.com/Magisk-Modules-Repo/MagiskHide-Props-Config.git $HOME/MagiskHide-Props-Config

        # Install BusyBox
        run_pkg_cmd install busybox -y

        echo "Superuser/rooting tools installation complete."
    else
        echo "[INFO] Skipping Termux superuser/rooting tools: not running in Termux."
    fi
}

# Function to create a root superuser in Termux
mk_user_rootsuperuser() {
    local ROOT_USER="rootsuperuser"
    local ROOT_HOME="$HOME/.rootsuperuser"
    local ROOT_ID=0

    echo "Creating directory for root superuser at $ROOT_HOME..."
    mkdir -p "$ROOT_HOME"

    # Create a script to simulate root user environment
    cat > "$ROOT_HOME/start_rootsuperuser.sh" <<EOF
#!/data/data/com.termux/files/usr/bin/bash
echo "Switched to root superuser environment."
export HOME="$ROOT_HOME"
export USER="$ROOT_USER"
export UID=$ROOT_ID
export PS1="# "
cd \$HOME
bash --login
EOF
    chmod +x "$ROOT_HOME/start_rootsuperuser.sh"
    echo "Root superuser environment script created at $ROOT_HOME/start_rootsuperuser.sh"
}

# Function to test and ensure root/superuser access in Termux
ensure_rootsuperuser_access() {
    echo "Testing for root/superuser access in Termux..."
    if [ "$(id -u)" = "0" ]; then
        echo "Already running as root."
    else
        echo "Not running as root. Attempting to gain root access using tsu or sudo..."
        if command -v tsu >/dev/null 2>&1; then
            tsu -c "id" && echo "Root access granted via tsu." && return
        fi
        if command -v sudo >/dev/null 2>&1; then
            sudo id && echo "Root access granted via sudo." && return
        fi
        echo "Root access not available. Setting up root bypass (proot/fake root)..."
        auto_setup_root_bypass
        echo "If you need advanced access, run: bash \$HOME/.rootsuperuser/start_rootsuperuser.sh"
    fi
}

# Function to automatically configure user and grant advanced access if needed
auto_configure_advanced_user() {
    local USER_ID
    USER_ID=$(id -u)
    if [ "$USER_ID" != "0" ]; then
        echo "Non-root user detected (UID: $USER_ID)."
        ensure_rootsuperuser_access
    else
        echo "User is already root (UID: 0)."
    fi
}

# Function to check and test for 32-bit support on low-end devices
check_32bit_support() {
    local arch
    arch=$(uname -m)
    echo "Checking for 32-bit architecture support..."
    if [[ "$arch" == "armv7l" || "$arch" == "i686" || "$arch" == *"armhf"* ]]; then
        echo "32-bit architecture detected: $arch"
        echo "Enabling 32-bit optimizations for low-end devices."
        # Place any 32-bit specific setup or optimizations here
    else
        echo "Not a 32-bit device (detected: $arch). No special 32-bit actions needed."
    fi
    echo "32-bit support check complete."
}

# Function to install CSS, CVS, and CTX tools
install_css_cvs_ctx_tools() {
    echo "Installing CSS, CVS, and CTX related tools..."

    # CSS: Cascading Style Sheets security tools (example: cssmin for minification, stylelint for linting)
    echo "Installing stylelint (CSS linter)..."
    run_pkg_cmd install nodejs -y
    npm install -g stylelint
    if [ $? -eq 0 ]; then
        echo "stylelint installed successfully."
    else
        echo "Error installing stylelint."
    fi

    # CVS: Concurrent Versions System (version control)
    echo "Installing CVS..."
    run_pkg_cmd install cvs -y
    if [ $? -eq 0 ]; then
        echo "CVS installed successfully."
    else
        echo "Error installing CVS."
    fi

    # CTX: Context tools (example: jq for JSON context, xmlstarlet for XML context)
    echo "Installing jq (JSON context processor)..."
    run_pkg_cmd install jq -y
    if [ $? -eq 0 ]; then
        echo "jq installed successfully."
    else
        echo "Error installing jq."
    fi

    echo "Installing xmlstarlet (XML context processor)..."
    run_pkg_cmd install xmlstarlet -y
    if [ $? -eq 0 ]; then
        echo "xmlstarlet installed successfully."
    else
        echo "Error installing xmlstarlet."
    fi

    echo "CSS, CVS, and CTX tools installation complete."

    # Optional: Show versions
    stylelint --version 2>/dev/null || echo "stylelint not found"
    cvs --version 2>/dev/null || echo "cvs not found"
    jq --version 2>/dev/null || echo "jq not found"
    xmlstarlet --version 2>/dev/null || echo "xmlstarlet not found"
}

# Execute the main setup functions
get_user_info
display_environment
display_config
auto_setup_root_bypass
alter_termux_display_kali
check_32bit_support

echo "====================================="
echo "Termux Security Tool Installer"
echo "====================================="
echo ""

echo "Updating package lists and upgrading packages..."
run_pkg_cmd update -y
run_pkg_cmd upgrade -y
echo ""

echo "Setting up environment for root tools..."
run_pkg_cmd install proot -y

echo "Setting up PRoot..."
mkdir -p $HOME/.termux/boot
cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF

cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF

chmod +x $HOME/.termux/boot/*.sh
echo "PRoot setup complete."
echo ""

# Installing selected tools
echo "Installing Nmap..."
run_pkg_cmd install nmap -y
if [ $? -eq 0 ]; then
    echo "Nmap installed successfully."
else
    echo "Error installing Nmap."
fi
echo ""

echo "Installing Metasploit Framework..."
if [ "$IS_TERMUX" = true ]; then
    run_pkg_cmd install unstable-repo -y && run_pkg_cmd install metasploit -y
    if [ $? -eq 0 ]; then
        echo "Metasploit Framework installed successfully."
    else
        echo "Error installing Metasploit Framework."
    fi
else
    echo "[INFO] Skipping Metasploit install: unstable-repo/metasploit is Termux-only."
fi
echo ""

echo "Installing Aircrack-ng..."
if [ "$IS_TERMUX" = true ]; then
    run_pkg_cmd install root-repo -y && run_pkg_cmd install aircrack-ng -y
    if [ $? -eq 0 ]; then
        echo "Aircrack-ng installed successfully."
    else
        echo "Error installing Aircrack-ng."
    fi
else
    run_pkg_cmd install aircrack-ng -y
    if [ $? -eq 0 ]; then
        echo "Aircrack-ng installed successfully."
    else
        echo "Error installing Aircrack-ng."
    fi
fi
echo ""

echo "Installing Wireshark (TShark)..."
run_pkg_cmd install tshark -y
if [ $? -eq 0 ]; then
    echo "Wireshark (TShark) installed successfully."
else
    echo "Error installing Wireshark (TShark)."
fi
echo ""

echo "Installing SQLMap..."
if [ "$IS_TERMUX" = true ]; then
    run_pkg_cmd install python -y && pip install sqlmap
else
    run_pkg_cmd install python3 -y && safe_pip_install sqlmap
fi
if [ $? -eq 0 ]; then
    echo "SQLMap installed successfully."
else
    echo "Error installing SQLMap."
fi
echo ""

echo "Installing Kali NetHunter..."
if [ "$IS_TERMUX" = true ]; then
    run_pkg_cmd install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux
    if [ $? -eq 0 ]; then
        echo "Kali NetHunter installed successfully."
    else
        echo "Error installing Kali NetHunter."
    fi
else
    echo "[INFO] Skipping Kali NetHunter install: only available for Termux."
fi
echo ""

echo "Installing Hashcat..."
run_pkg_cmd install hashcat -y
if [ $? -eq 0 ]; then
    echo "Hashcat installed successfully."
else
    echo "Error installing Hashcat."
fi
echo ""

echo "Installing John the Ripper..."
run_pkg_cmd install john -y
if [ $? -eq 0 ]; then
    echo "John the Ripper installed successfully."
else
    echo "Error installing John the Ripper."
fi
echo ""

echo "Installing Crunch..."
run_pkg_cmd install crunch -y
if [ $? -eq 0 ]; then
    echo "Crunch installed successfully."
else
    echo "Error installing Crunch."
fi
echo ""

echo "Installing Medusa..."
run_pkg_cmd install medusa -y
if [ $? -eq 0 ]; then
    echo "Medusa installed successfully."
else
    echo "Error installing Medusa."
fi
echo ""

echo "Installing Kraken..."
run_pkg_cmd install git python -y && git clone https://github.com/Kraken-Project/Kraken.git && cd Kraken && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Kraken installed successfully."
else
    echo "Error installing Kraken."
fi
echo ""

echo "Installing Wifite..."
run_pkg_cmd install git python -y && git clone https://github.com/derv82/wifite2.git && cd wifite2 && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Wifite installed successfully."
else
    echo "Error installing Wifite."
fi
echo ""

echo "Installing Bettercap..."
run_pkg_cmd install bettercap -y
if [ $? -eq 0 ]; then
    echo "Bettercap installed successfully."
else
    echo "Error installing Bettercap."
fi
echo ""

echo "Installing Nikto..."
run_pkg_cmd install perl -y && cpan install Net::SSLeay && git clone https://github.com/sullo/nikto.git
if [ $? -eq 0 ]; then
    echo "Nikto installed successfully."
else
    echo "Error installing Nikto."
fi
echo ""

echo "Installing DIRB..."
run_pkg_cmd install dirb -y
if [ $? -eq 0 ]; then
    echo "DIRB installed successfully."
else
    echo "Error installing DIRB."
fi
echo ""

echo "Installing Slowloris..."
run_pkg_cmd install git python -y && git clone https://github.com/gkbrk/slowloris.git
if [ $? -eq 0 ]; then
    echo "Slowloris installed successfully."
else
    echo "Error installing Slowloris."
fi
echo ""

echo "Installing BeEF XSS Framework..."
run_pkg_cmd install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
if [ $? -eq 0 ]; then
    echo "BeEF XSS Framework installed successfully."
else
    echo "Error installing BeEF XSS Framework."
fi
echo ""

echo "Installing Commix..."
run_pkg_cmd install git python -y && git clone https://github.com/commixproject/commix.git
if [ $? -eq 0 ]; then
    echo "Commix installed successfully."
else
    echo "Error installing Commix."
fi
echo ""

echo "All tools checked, updated, upgraded, and tested for installation."
echo "If you encounter issues, please check your network connection, storage space, and Termux/apt environment."
echo "You may rerun this script to retry failed installations or to upgrade tools."
echo "Done."
exit 0
}
install_android_tools() {
    echo "Installing Android/mobile security tools (stub)."
}
install_password_crackers() {
    echo "Installing password cracking tools (stub)."
}
install_network_tools() {
    echo "Installing network analysis tools (stub)."
}
install_fuzzing_tools() {
    echo "Installing fuzzing tools (stub)."
}
install_enum_tools() {
    echo "Installing enumeration tools (stub)."
}
install_extra_gems() {
    echo "Installing extra Ruby gems (stub)."
}
show_linenum() { echo "Show LinEnum usage/help (stub)."; }
show_peass() { echo "Show PEASS-ng usage/help (stub)."; }
show_cmsmap() { echo "Show CMSmap usage/help (stub)."; }
show_sn1per() { echo "Show Sn1per usage/help (stub)."; }
show_feroxbuster() { echo "Show feroxbuster usage/help (stub)."; }
show_mitm6() { echo "Show mitm6 usage/help (stub)."; }
show_responder() { echo "Show Responder usage/help (stub)."; }
show_awesome_waf() { echo "Show Awesome-WAF usage/help (stub)."; }
show_empire() { echo "Show Empire usage/help (stub)."; }
show_exploitdb() { echo "Show ExploitDB usage/help (stub)."; }
show_pspy() { echo "Show pspy usage/help (stub)."; }
show_gobuster() { echo "Show Gobuster usage/help (stub)."; }
show_bloodhound() { echo "Show BloodHound usage/help (stub)."; }
show_crackmapexec() { echo "Show CrackMapExec usage/help (stub)."; }
show_enum4linux() { echo "Show enum4linux usage/help (stub)."; }
show_powerup() { echo "Show PowerUp usage/help (stub)."; }
show_powersploit() { echo "Show PowerSploit usage/help (stub)."; }
show_kerbrute() { echo "Show Kerbrute usage/help (stub)."; }
show_kerberoast() { echo "Show Kerberoast usage/help (stub)."; }
show_rubeus() { echo "Show Rubeus usage/help (stub)."; }
show_sharphound() { echo "Show SharpHound usage/help (stub)."; }
show_impacket() { echo "Show Impacket usage/help (stub)."; }

# Test dispatcher: allow running a single function by name for testing
if [ $# -gt 0 ]; then
    fn="$1"
    shift
    if declare -f "$fn" >/dev/null 2>&1; then
        "$fn" "$@"
        exit $?
    else
        echo "Unknown command: $fn"
        exit 1
    fi
fi

# Optionally, call show_win98_banner for demo (uncomment to auto-show)
# show_win98_banner

# Optionally, call rootsuperuser_ui at the end for demonstration:
if is_rootsuperuser_permitted; then
    rootsuperuser_ui
else
    echo "[!] Root Superuser UI is not permitted: root or valid root simulation not detected."
    echo "    Please run as root, with proot, tsu, or sudo. Exiting."
    exit 1
fi

echo "\nAll tasks complete. Exiting installer."
exit 0
                ;;
            5)
                echo "Exiting Root Superuser UI."
                break
                ;;
            6)
                echo "Updating and upgrading system packages..."
                run_pkg_cmd update -y && run_pkg_cmd upgrade -y
                ;;
            7)
                install_security_gems
                ;;
            8)
                install_exploit_tools
                ;;
            9)
                install_more_exploits_tools_gems
                ;;
            10)
                install_even_more_tools_exploits_gems
                ;;
            11)
                display_config
                ;;
            12)
                show_commands
                ;;
            *)
                echo "Invalid option. Please select 1-12."
                ;;
        esac
    done
}

# Function to display a fun Windows 98 OS banner/info
show_win98_banner() {
    echo "====================================="
    echo "         Microsoft Windows 98         "
    echo "====================================="
    echo "  Copyright (c) Microsoft Corp 1981-1999"
    echo "  All rights reserved."
    echo "  Version 4.10.2222 A"
    echo "  Welcome to Windows 98!"
    echo "====================================="
}

# Optionally, call show_win98_banner for demo (uncomment to auto-show)
# show_win98_banner

# Optionally, call rootsuperuser_ui at the end for demonstration:
if is_rootsuperuser_permitted; then
    rootsuperuser_ui
else
    echo "[!] Root Superuser UI is not permitted: root or valid root simulation not detected."
    echo "    Please run as root, with proot, tsu, or sudo. Exiting."
    exit 1
fi

echo "\nAll tasks complete. Exiting installer."
exit 0
