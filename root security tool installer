#!/data/data/com.termux/files/usr/bin/bash

# Display current UTC date and time in specified format
echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): $(date -u "+%Y-%m-%d %H:%M:%S")"

# Display current user's login
echo "Current User's Login: $(whoami)"

# Function to get Termux-specific user information
get_user_info() {
    TERMUX_USERNAME="$USER"
    USER_HOME="$HOME"
    IS_SUDO=false
    if [ "$(id -u)" = "0" ]; then
        IS_SUDO=true
    fi
    USER_GROUPS=$(groups)
    echo "System Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Current Date/Time (UTC): $(date -u "+%Y-%m-%d %H:%M:%S")"
    echo "Username: $TERMUX_USERNAME"
    echo "Home Directory: $USER_HOME"
    echo "Root Access: $IS_SUDO"
    echo "User Groups: $USER_GROUPS"
    echo "Terminal: $TERM"
    echo "Shell: $SHELL"
    if [ -f "$PREFIX/etc/motd" ]; then
        echo "Termux Version: $(grep -o 'Welcome to Termux.*' $PREFIX/etc/motd | cut -d' ' -f4)"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display environment info for VM (fix: typo in function name)
display_environment() {
    echo "VM/Environment Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "OS: $(uname -o 2>/dev/null || uname -s)"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "CPU Info:"
    grep -m 1 'model name' /proc/cpuinfo 2>/dev/null || echo "N/A"
    echo "Memory Info:"
    grep MemTotal /proc/meminfo 2>/dev/null || echo "N/A"
    echo "Virtualization Check:"
    if grep -q -i 'hypervisor' /proc/cpuinfo 2>/dev/null; then
        echo "Running inside a VM (hypervisor detected)"
    else
        echo "No hypervisor detected"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display configuration and auto-setup
display_config() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Root Security Tool Installer Configuration"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "User: $(whoami)"
    echo "User ID: $(id -u)"
    echo "Groups: $(groups)"
    echo "Home: $HOME"
    echo "Shell: $SHELL"
    echo "Termux: $([ -n \"$PREFIX\" ] && echo 'Yes' || echo 'No')"
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "OS: $PRETTY_NAME"
    elif [ -f /system/build.prop ]; then
        echo "OS: Android (detected via build.prop)"
    else
        echo "OS: Unknown"
    fi
    echo "Kali OS Display: $([ -d $HOME/kalifs-arm64 ] && echo 'Installed' || echo 'Not Installed')"
    echo "Root Bypass: $([ \"$(id -u)\" = \"0\" ] && echo 'Not Needed' || echo 'Enabled (using proot/fake root)')"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to auto-configure sudo/proot if needed
auto_setup_root_bypass() {
    if [ "$(id -u)" != "0" ]; then
        echo "Non-root user detected. Setting up root bypass (proot)..."
        pkg install proot -y
        mkdir -p $HOME/.termux/boot
        cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF
        cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF
        chmod +x $HOME/.termux/boot/*.sh
        echo "Root bypass setup complete."
    else
        echo "Root user detected. No root bypass needed."
    fi
}

# Function to alter Termux display to show Kali OS (if installed)
alter_termux_display_kali() {
    if [ -d "$HOME/kalifs-arm64" ] || [ -d "$HOME/kalifs-armhf" ]; then
        echo "Kali Linux detected in Termux. Altering display..."
        echo "Welcome to Kali Linux (via Termux)" > $HOME/.termux/motd
    fi
}

# Function to display available commands
show_commands() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Available Commands:"
    echo "  show_commands                - Display this command list"
    echo "  get_user_info                - Show Termux user info"
    echo "  display_environment          - Show VM/environment info"
    echo "  display_config               - Show installer config"
    echo "  auto_setup_root_bypass       - Setup root bypass if needed"
    echo "  alter_termux_display_kali    - Show Kali OS in Termux MOTD"
    echo "  setup_test_environment       - Setup secondary test environment"
    echo "  install_exploit_tools        - Install extra exploit tools"
    echo "  install_security_gems        - Install extra Ruby security gems"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to install extra exploit tools
install_exploit_tools() {
    echo "Installing ExploitDB SearchSploit..."
    pkg install git -y && git clone https://github.com/offensive-security/exploitdb.git && cd exploitdb && git clone https://github.com/offensive-security/searchsploit.git
    echo "Installing sqlninja (SQL Server exploit)..."
    pkg install git -y && git clone https://github.com/xxgrunge/sqlninja.git
    echo "Installing Routersploit (exploit framework)..."
    pkg install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
    echo "Installing Commix (Automated Command Injection)..."
    pkg install git python -y && git clone https://github.com/commixproject/commix.git
    echo "Installing BeEF XSS Framework..."
    pkg install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
    echo "Installing Zphisher (Phishing toolkit)..."
    pkg install git php openssh -y && git clone https://github.com/htr-tech/zphisher.git
    echo "Exploit tools installation complete."
}

# Function to install extra Ruby security gems
install_security_gems() {
    echo "Installing Metasploit Community Gems..."
    pkg install ruby -y && gem install rex msfrpc-client metasploit_data_models
    echo "Installing Wpscan (WordPress vulnerability scanner)..."
    pkg install ruby -y && gem install wpscan
    echo "Installing Arachni (web app security scanner)..."
    pkg install ruby -y && gem install arachni
    echo "Installing Nokogiri (Ruby gem for parsing HTML/XML)..."
    pkg install ruby -y && gem install nokogiri
    echo "Ruby security gems installation complete."
}

# Execute the functions
get_user_info
display_environment
display_config
auto_setup_root_bypass
alter_termux_display_kali

#!/data/data/com.termux/files/usr/bin/bash
# Termux Tool Installer script
# Generated on 2025-05-19 05:02:14
# This script will install the selected security tools in Termux

echo "====================================="
echo "Termux Security Tool Installer"
echo "====================================="
echo ""

echo "Updating package lists..."
pkg update -y
echo ""

echo "Setting up environment for root tools..."
pkg install proot -y

echo "Setting up PRoot..."
mkdir -p $HOME/.termux/boot
cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF

cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF

chmod +x $HOME/.termux/boot/*.sh
echo "PRoot setup complete."
echo ""

# Installing selected tools
echo "Installing Nmap..."
pkg install nmap -y
if [ $? -eq 0 ]; then
    echo "Nmap installed successfully."
else
    echo "Error installing Nmap."
fi
echo ""

echo "Installing Metasploit Framework..."
pkg install unstable-repo -y && pkg install metasploit -y
if [ $? -eq 0 ]; then
    echo "Metasploit Framework installed successfully."
else
    echo "Error installing Metasploit Framework."
fi
echo ""

echo "Installing THC Hydra..."
pkg install hydra -y
if [ $? -eq 0 ]; then
    echo "THC Hydra installed successfully."
else
    echo "Error installing THC Hydra."
fi
echo ""

echo "Installing Aircrack-ng..."
pkg install root-repo -y && pkg install aircrack-ng -y
if [ $? -eq 0 ]; then
    echo "Aircrack-ng installed successfully."
else
    echo "Error installing Aircrack-ng."
fi
echo ""

echo "Installing Wireshark (TShark)..."
pkg install tshark -y
if [ $? -eq 0 ]; then
    echo "Wireshark (TShark) installed successfully."
else
    echo "Error installing Wireshark (TShark)."
fi
echo ""

echo "Installing SQLMap..."
pkg install python -y && pip install sqlmap
if [ $? -eq 0 ]; then
    echo "SQLMap installed successfully."
else
    echo "Error installing SQLMap."
fi
echo ""

echo "Installing Kali NetHunter..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux
if [ $? -eq 0 ]; then
    echo "Kali NetHunter installed successfully."
else
    echo "Error installing Kali NetHunter."
fi
echo ""

echo "Installing Hashcat..."
pkg install hashcat -y
if [ $? -eq 0 ]; then
    echo "Hashcat installed successfully."
else
    echo "Error installing Hashcat."
fi
echo ""

echo "Installing John the Ripper..."
pkg install john -y
if [ $? -eq 0 ]; then
    echo "John the Ripper installed successfully."
else
    echo "Error installing John the Ripper."
fi
echo ""

echo "Installing Crunch..."
pkg install crunch -y
if [ $? -eq 0 ]; then
    echo "Crunch installed successfully."
else
    echo "Error installing Crunch."
fi
echo ""

echo "Installing Medusa..."
pkg install medusa -y
if [ $? -eq 0 ]; then
    echo "Medusa installed successfully."
else
    echo "Error installing Medusa."
fi
echo ""

echo "Installing Kraken..."
pkg install git python -y && git clone https://github.com/Kraken-Project/Kraken.git && cd Kraken && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Kraken installed successfully."
else
    echo "Error installing Kraken."
fi
echo ""

echo "Installing Wifite..."
pkg install git python -y && git clone https://github.com/derv82/wifite2.git && cd wifite2 && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Wifite installed successfully."
else
    echo "Error installing Wifite."
fi
echo ""

echo "Installing Bettercap..."
pkg install bettercap -y
if [ $? -eq 0 ]; then
    echo "Bettercap installed successfully."
else
    echo "Error installing Bettercap."
fi
echo ""

echo "Installing Nikto..."
pkg install perl -y && cpan install Net::SSLeay && git clone https://github.com/sullo/nikto.git
if [ $? -eq 0 ]; then
    echo "Nikto installed successfully."
else
    echo "Error installing Nikto."
fi
echo ""

echo "Installing DIRB..."
pkg install dirb -y
if [ $? -eq 0 ]; then
    echo "DIRB installed successfully."
else
    echo "Error installing DIRB."
fi
echo ""

echo "Installing Slowloris..."
pkg install git python -y && git clone https://github.com/gkbrk/slowloris.git
if [ $? -eq 0 ]; then
    echo "Slowloris installed successfully."
else
    echo "Error installing Slowloris."
fi
echo ""

echo "Installing BeEF XSS Framework..."
pkg install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
if [ $? -eq 0 ]; then
    echo "BeEF XSS Framework installed successfully."
else
    echo "Error installing BeEF XSS Framework."
fi
echo ""

echo "Installing Commix..."
pkg install git python -y && git clone https://github.com/commixproject/commix.git
if [ $? -eq 0 ]; then
    echo "Commix installed successfully."
else
    echo "Error installing Commix."
fi
echo ""

echo "Installing Reaver..."
pkg install reaver -y
if [ $? -eq 0 ]; then
    echo "Reaver installed successfully."
else
    echo "Error installing Reaver."
fi
echo ""

echo "Installing Sherlock..."
pkg install git python -y && git clone https://github.com/sherlock-project/sherlock.git && cd sherlock && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Sherlock installed successfully."
else
    echo "Error installing Sherlock."
fi
echo ""

echo "Installing Zphisher..."
pkg install git php openssh -y && git clone https://github.com/htr-tech/zphisher.git
if [ $? -eq 0 ]; then
    echo "Zphisher installed successfully."
else
    echo "Error installing Zphisher."
fi
echo ""

echo "Installing MSFvenom Payload Creator..."
pkg install metasploit-framework -y
if [ $? -eq 0 ]; then
    echo "MSFvenom Payload Creator installed successfully."
else
    echo "Error installing MSFvenom Payload Creator."
fi
echo ""

echo "Installing ReconDog..."
pkg install git python -y && git clone https://github.com/s0md3v/ReconDog.git && cd ReconDog && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "ReconDog installed successfully."
else
    echo "Error installing ReconDog."
fi
echo ""

echo "Installing Kali Linux (Full)..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux kali
if [ $? -eq 0 ]; then
    echo "Kali Linux (Full) installed successfully."
else
    echo "Error installing Kali Linux (Full)."
fi
echo ""

echo "Installing RouterSploit..."
pkg install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "RouterSploit installed successfully."
else
    echo "Error installing RouterSploit."
fi
echo ""

echo "Installing GoBuster..."
pkg install golang -y && go get github.com/OJ/gobuster
if [ $? -eq 0 ]; then
    echo "GoBuster installed successfully."
else
    echo "Error installing GoBuster."
fi
echo ""

echo "Installing Node.js & npm..."
pkg install nodejs -y
if [ $? -eq 0 ]; then
    echo "Node.js & npm installed successfully."
else
    echo "Error installing Node.js & npm."
fi
echo ""

echo "Installing TypeScript..."
pkg install nodejs -y && npm install -g typescript
if [ $? -eq 0 ]; then
    echo "TypeScript installed successfully."
else
    echo "Error installing TypeScript."
fi
echo ""

echo "Installing React Native Development Tools..."
pkg install nodejs -y && npm install -g react-native-cli expo-cli
if [ $? -eq 0 ]; then
    echo "React Native Development Tools installed successfully."
else
    echo "Error installing React Native Development Tools."
fi
echo ""

echo "Installing Python 3..."
pkg install python -y
if [ $? -eq 0 ]; then
    echo "Python 3 installed successfully."
else
    echo "Error installing Python 3."
fi
echo ""

echo "Installing Ruby..."
pkg install ruby -y
if [ $? -eq 0 ]; then
    echo "Ruby installed successfully."
else
    echo "Error installing Ruby."
fi
echo ""

echo "Installing Go..."
pkg install golang -y
if [ $? -eq 0 ]; then
    echo "Go installed successfully."
else
    echo "Error installing Go."
fi
echo ""

echo "Installing Rust..."
pkg install rust -y
if [ $? -eq 0 ]; then
    echo "Rust installed successfully."
else
    echo "Error installing Rust."
fi
echo ""

echo "Installing Java JDK..."
pkg install openjdk-17 -y
if [ $? -eq 0 ]; then
    echo "Java JDK installed successfully."
else
    echo "Error installing Java JDK."
fi
echo ""

echo "Installing Kotlin..."
pkg install kotlin -y
if [ $? -eq 0 ]; then
    echo "Kotlin installed successfully."
else
    echo "Error installing Kotlin."
fi
echo ""

echo "Installing PHP..."
pkg install php -y
if [ $? -eq 0 ]; then
    echo "PHP installed successfully."
else
    echo "Error installing PHP."
fi
echo ""

echo "Installing Perl..."
pkg install perl -y
if [ $? -eq 0 ]; then
    echo "Perl installed successfully."
else
    echo "Error installing Perl."
fi
echo ""

echo "Installing C/C++ Development..."
pkg install clang -y
if [ $? -eq 0 ]; then
    echo "C/C++ Development installed successfully."
else
    echo "Error installing C/C++ Development."
fi
echo ""

echo "Installing R Language..."
pkg install r-base -y
if [ $? -eq 0 ]; then
    echo "R Language installed successfully."
else
    echo "Error installing R Language."
fi
echo ""

echo "Installing APKTool..."
pkg install apktool -y
if [ $? -eq 0 ]; then
    echo "APKTool installed successfully."
else
    echo "Error installing APKTool."
fi
echo ""

echo "Installing dex2jar..."
pkg install dex2jar -y
if [ $? -eq 0 ]; then
    echo "dex2jar installed successfully."
else
    echo "Error installing dex2jar."
fi
echo ""

echo "Installing JDK Tools..."
pkg install openjdk-17 -y
if [ $? -eq 0 ]; then
    echo "JDK Tools installed successfully."
else
    echo "Error installing JDK Tools."
fi
echo ""

echo "Installing Android Tools..."
pkg install android-tools -y
if [ $? -eq 0 ]; then
    echo "Android Tools installed successfully."
else
    echo "Error installing Android Tools."
fi
echo ""

echo "Installing JADX..."
pkg install jadx -y
if [ $? -eq 0 ]; then
    echo "JADX installed successfully."
else
    echo "Error installing JADX."
fi
echo ""

echo "Installing Objection..."
pip install objection
if [ $? -eq 0 ]; then
    echo "Objection installed successfully."
else
    echo "Error installing Objection."
fi
echo ""

echo "Installing Mobile Security Framework..."
pkg install git python -y && git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git && cd Mobile-Security-Framework-MobSF && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Mobile Security Framework installed successfully."
else
    echo "Error installing Mobile Security Framework."
fi
echo ""

echo "Installing Drozer..."
pip install drozer
if [ $? -eq 0 ]; then
    echo "Drozer installed successfully."
else
    echo "Error installing Drozer."
fi
echo ""

echo "Installing Flutter..."
pkg install flutter -y
if [ $? -eq 0 ]; then
    echo "Flutter installed successfully."
else
    echo "Error installing Flutter."
fi
echo ""

echo "Installing JShell..."
pkg install openjdk-17 -y
if [ $? -eq 0 ]; then
    echo "JShell installed successfully."
else
    echo "Error installing JShell."
fi
echo ""

echo "Installing Kali Linux with XFCE..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux kali --full
if [ $? -eq 0 ]; then
    echo "Kali Linux with XFCE installed successfully."
else
    echo "Error installing Kali Linux with XFCE."
fi
echo ""

echo "Installing Kali Minimal GUI..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux kali --minimal
if [ $? -eq 0 ]; then
    echo "Kali Minimal GUI installed successfully."
else
    echo "Error installing Kali Minimal GUI."
fi
echo ""

echo "Installing TigerVNC Server..."
pkg install tigervnc -y
if [ $? -eq 0 ]; then
    echo "TigerVNC Server installed successfully."
else
    echo "Error installing TigerVNC Server."
fi
echo ""

echo "Installing X11 Repository..."
pkg install x11-repo -y
if [ $? -eq 0 ]; then
    echo "X11 Repository installed successfully."
else
    echo "Error installing X11 Repository."
fi
echo ""

echo "Installing XFCE4 Desktop..."
pkg install x11-repo -y && pkg install xfce4 -y
if [ $? -eq 0 ]; then
    echo "XFCE4 Desktop installed successfully."
else
    echo "Error installing XFCE4 Desktop."
fi
echo ""

echo "Installing MATE Desktop..."
pkg install x11-repo -y && pkg install mate-desktop -y
if [ $? -eq 0 ]; then
    echo "MATE Desktop installed successfully."
else
    echo "Error installing MATE Desktop."
fi
echo ""

echo "Installing LXQt Desktop..."
pkg install x11-repo -y && pkg install lxqt -y
if [ $? -eq 0 ]; then
    echo "LXQt Desktop installed successfully."
else
    echo "Error installing LXQt Desktop."
fi
echo ""

echo "Installing i3 Window Manager..."
pkg install x11-repo -y && pkg install i3 -y
if [ $? -eq 0 ]; then
    echo "i3 Window Manager installed successfully."
else
    echo "Error installing i3 Window Manager."
fi
echo ""

echo "Installing Xorg Server..."
pkg install x11-repo -y && pkg install xorg-server -y
if [ $? -eq 0 ]; then
    echo "Xorg Server installed successfully."
else
    echo "Error installing Xorg Server."
fi
echo ""

echo "Installing aterm Terminal..."
pkg install x11-repo -y && pkg install aterm -y
if [ $? -eq 0 ]; then
    echo "aterm Terminal installed successfully."
else
    echo "Error installing aterm Terminal."
fi
echo ""

echo "Installing XFCE4 Terminal..."
pkg install x11-repo -y && pkg install xfce4-terminal -y
if [ $? -eq 0 ]; then
    echo "XFCE4 Terminal installed successfully."
else
    echo "Error installing XFCE4 Terminal."
fi
echo ""

echo "Installing Wireshark GTK..."
pkg install x11-repo -y && pkg install wireshark-gtk -y
if [ $? -eq 0 ]; then
    echo "Wireshark GTK installed successfully."
else
    echo "Error installing Wireshark GTK."
fi
echo ""

echo "Installing Firefox Browser..."
pkg install x11-repo -y && pkg install firefox -y
if [ $? -eq 0 ]; then
    echo "Firefox Browser installed successfully."
else
    echo "Error installing Firefox Browser."
fi
echo ""

echo "Installing Geany IDE..."
pkg install x11-repo -y && pkg install geany -y
if [ $? -eq 0 ]; then
    echo "Geany IDE installed successfully."
else
    echo "Error installing Geany IDE."
fi
echo ""

echo "Installing GIMP..."
pkg install x11-repo -y && pkg install gimp -y
if [ $? -eq 0 ]; then
    echo "GIMP installed successfully."
else
    echo "Error installing GIMP."
fi
echo ""

echo "Installing Inkscape..."
pkg install x11-repo -y && pkg install inkscape -y
if [ $? -eq 0 ]; then
    echo "Inkscape installed successfully."
else
    echo "Error installing Inkscape."
fi
echo ""

echo "Installing VLC Media Player..."
pkg install x11-repo -y && pkg install vlc -y
if [ $? -eq 0 ]; then
    echo "VLC Media Player installed successfully."
else
    echo "Error installing VLC Media Player."
fi
echo ""

echo "Installing Blender..."
pkg install x11-repo -y && pkg install blender -y
if [ $? -eq 0 ]; then
    echo "Blender installed successfully."
else
    echo "Error installing Blender."
fi
echo ""

echo "Installing LibreOffice..."
pkg install x11-repo -y && pkg install libreoffice -y
if [ $? -eq 0 ]; then
    echo "LibreOffice installed successfully."
else
    echo "Error installing LibreOffice."
fi
echo ""

echo "Installing Eclipse IDE..."
pkg install x11-repo -y && pkg install openjdk-17 eclipse -y
if [ $? -eq 0 ]; then
    echo "Eclipse IDE installed successfully."
else
    echo "Error installing Eclipse IDE."
fi
echo ""

echo "Installing Kali Tools with GUI..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux kali
if [ $? -eq 0 ]; then
    echo "Kali Tools with GUI installed successfully."
else
    echo "Error installing Kali Tools with GUI."
fi
echo ""

echo "Installing VNC Server Setup..."
pkg install tigervnc -y && mkdir -p ~/.vnc && echo '#!/data/data/com.termux/files/usr/bin/sh\nxrdb $HOME/.Xresources\nstartxfce4 &' > ~/.vnc/xstartup && chmod +x ~/.vnc/xstartup
if [ $? -eq 0 ]; then
    echo "VNC Server Setup installed successfully."
else
    echo "Error installing VNC Server Setup."
fi
echo ""

echo "Installing VS Code Server..."
pkg install nodejs -y && npm install -g code-server
if [ $? -eq 0 ]; then
    echo "VS Code Server installed successfully."
else
    echo "Error installing VS Code Server."
fi
echo ""

echo "Installing Jupyter Notebook..."
pkg install python -y && pip install jupyter notebook
if [ $? -eq 0 ]; then
    echo "Jupyter Notebook installed successfully."
else
    echo "Error installing Jupyter Notebook."
fi
echo ""

echo "Installing Termux with Root Access..."
pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "Termux with Root Access installed successfully."
else
    echo "Error installing Termux with Root Access."
fi
echo ""

echo "Installing Magisk for Termux..."
pkg install curl -y && curl -sL https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/repo-fix.sh | bash
if [ $? -eq 0 ]; then
    echo "Magisk for Termux installed successfully."
else
    echo "Error installing Magisk for Termux."
fi
echo ""

echo "Installing tsu..."
pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "tsu installed successfully."
else
    echo "Error installing tsu."
fi
echo ""

echo "Installing Termux Sudo..."
pkg install git -y && git clone https://gitlab.com/st42/termux-sudo.git && cd termux-sudo && pkg install ncurses-utils -y && cat sudo > /data/data/com.termux/files/usr/bin/sudo && chmod 700 /data/data/com.termux/files/usr/bin/sudo
if [ $? -eq 0 ]; then
    echo "Termux Sudo installed successfully."
else
    echo "Error installing Termux Sudo."
fi
echo ""

echo "Installing Termux Root Packages..."
pkg install root-repo -y
if [ $? -eq 0 ]; then
    echo "Termux Root Packages installed successfully."
else
    echo "Error installing Termux Root Packages."
fi
echo ""

echo "Installing SuperSU..."
pkg install wget -y && wget https://download.chainfire.eu/1220/SuperSU/SR5-SuperSU-v2.82-SR5-20171001224502.zip -O supersu.zip && unzip supersu.zip && cd supersu && sh update-binary
if [ $? -eq 0 ]; then
    echo "SuperSU installed successfully."
else
    echo "Error installing SuperSU."
fi
echo ""

echo "Installing BusyBox..."
pkg install busybox -y
if [ $? -eq 0 ]; then
    echo "BusyBox installed successfully."
else
    echo "Error installing BusyBox."
fi
echo ""

echo "Installing suroot..."
pkg install git -y && git clone https://github.com/MasterDevX/Termux-SU && cd Termux-SU && bash install.sh
if [ $? -eq 0 ]; then
    echo "suroot installed successfully."
else
    echo "Error installing suroot."
fi
echo ""

echo "Installing Root Repository..."
pkg install root-repo -y
if [ $? -eq 0 ]; then
    echo "Root Repository installed successfully."
else
    echo "Error installing Root Repository."
fi
echo ""

echo "Installing ADB with Root..."
pkg install android-tools -y && pkg install tsu -y
if [ $? -eq 0 ]; then
    echo "ADB with Root installed successfully."
else
    echo "Error installing ADB with Root."
fi
echo ""

echo "Installing Magisk Module Manager..."
pkg install git python -y && git clone https://github.com/Magisk-Modules-Repo/terminal_magisk_module_manager.git && cd terminal_magisk_module_manager && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Magisk Module Manager installed successfully."
else
    echo "Error installing Magisk Module Manager."
fi
echo ""

echo "Installing MagiskHide Props Config (root bypass)..."
pkg install git -y && git clone https://github.com/Magisk-Modules-Repo/MagiskHide-Props-Config.git
if [ $? -eq 0 ]; then
    echo "MagiskHide Props Config installed successfully."
else
    echo "Error installing MagiskHide Props Config."
fi
echo ""

echo "Installing Frida (dynamic instrumentation toolkit)..."
pkg install python -y && pip install frida-tools
if [ $? -eq 0 ]; then
    echo "Frida installed successfully."
else
    echo "Error installing Frida."
fi
echo ""

echo "Installing RootCloak (root detection bypass)..."
pkg install git -y && git clone https://github.com/devadvance/rootcloak.git
if [ $? -eq 0 ]; then
    echo "RootCloak installed successfully."
else
    echo "Error installing RootCloak."
fi
echo ""

echo "Installing ExploitDB SearchSploit..."
pkg install git -y && git clone https://github.com/offensive-security/exploitdb.git && cd exploitdb && git clone https://github.com/offensive-security/searchsploit.git
if [ $? -eq 0 ]; then
    echo "ExploitDB SearchSploit installed successfully."
else
    echo "Error installing ExploitDB SearchSploit."
fi
echo ""

echo "Installing sqlninja (SQL Server exploit)..."
pkg install git -y && git clone https://github.com/xxgrunge/sqlninja.git
if [ $? -eq 0 ]; then
    echo "sqlninja installed successfully."
else
    echo "Error installing sqlninja."
fi
echo ""

echo "Installing Routersploit (exploit framework)..."
pkg install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Routersploit installed successfully."
else
    echo "Error installing Routersploit."
fi
echo ""

echo "Installing Metasploit Community Gems..."
pkg install ruby -y && gem install rex msfrpc-client metasploit_data_models
if [ $? -eq 0 ]; then
    echo "Metasploit Community Gems installed successfully."
else
    echo "Error installing Metasploit Community Gems."
fi
echo ""

echo "Installing Wpscan (WordPress vulnerability scanner)..."
pkg install ruby -y && gem install wpscan
if [ $? -eq 0 ]; then
    echo "Wpscan installed successfully."
else
    echo "Error installing Wpscan."
fi
echo ""

echo "Installing Arachni (web app security scanner)..."
pkg install ruby -y && gem install arachni
if [ $? -eq 0 ]; then
    echo "Arachni installed successfully."
else
    echo "Error installing Arachni."
fi
echo ""

echo "Installing Nokogiri (Ruby gem for parsing HTML/XML)..."
pkg install ruby -y && gem install nokogiri
if [ $? -eq 0 ]; then
    echo "Nokogiri installed successfully."
else
    echo "Error installing Nokogiri."
fi
echo ""

echo "====================================="
echo "Bypass root, exploits, and extra gems installation complete!"
echo "====================================="
