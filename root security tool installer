# /data/data/com.termux/files/usr/bin/bash

# Display current UTC date and time in specified format
echo "Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): $(date -u "+%Y-%m-%d %H:%M:%S")"

# Display current user's login
echo "Current User's Login: $(whoami)"

# Function to get Termux-specific user information
get_user_info() {
    TERMUX_USERNAME="$USER"
    USER_HOME="$HOME"
    IS_SUDO=false
    if [ "$(id -u)" = "0" ]; then
        IS_SUDO=true
    fi
    USER_GROUPS=$(groups)
    echo "System Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Current Date/Time (UTC): $(date -u "+%Y-%m-%d %H:%M:%S")"
    echo "Username: $TERMUX_USERNAME"
    echo "Home Directory: $USER_HOME"
    echo "Root Access: $IS_SUDO"
    echo "User Groups: $USER_GROUPS"
    echo "Terminal: $TERM"
    echo "Shell: $SHELL"
    if [ -f "$PREFIX/etc/motd" ]; then
        echo "Termux Version: $(grep -o 'Welcome to Termux.*' $PREFIX/etc/motd | cut -d' ' -f4)"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display environment info for VM
display_environment() {
    echo "VM/Environment Information:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "OS: $(uname -o 2>/dev/null || uname -s)"
    echo "Kernel: $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "CPU Info:"
    grep -m 1 'model name' /proc/cpuinfo 2>/dev/null || echo "N/A"
    echo "Memory Info:"
    grep MemTotal /proc/meminfo 2>/dev/null || echo "N/A"
    echo "Virtualization Check:"
    if grep -q -i 'hypervisor' /proc/cpuinfo 2>/dev/null; then
        echo "Running inside a VM (hypervisor detected)"
    else
        echo "No hypervisor detected"
    fi
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to display configuration and auto-setup
display_config() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Root Security Tool Installer Configuration"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "User: $(whoami)"
    echo "User ID: $(id -u)"
    echo "Groups: $(groups)"
    echo "Home: $HOME"
    echo "Shell: $SHELL"
    echo "Termux: $([ -n \"$PREFIX\" ] && echo 'Yes' || echo 'No')"
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "OS: $PRETTY_NAME"
    elif [ -f /system/build.prop ]; then
        echo "OS: Android (detected via build.prop)"
    else
        echo "OS: Unknown"
    fi
    echo "Kali OS Display: $([ -d $HOME/kalifs-arm64 ] && echo 'Installed' || echo 'Not Installed')"
    echo "Root Bypass: $([ \"$(id -u)\" = \"0\" ] && echo 'Not Needed' || echo 'Enabled (using proot/fake root)')"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to auto-configure sudo/proot if needed
auto_setup_root_bypass() {
    if [ "$(id -u)" != "0" ]; then
        echo "Non-root user detected. Setting up root bypass (proot)..."
        pkg install proot -y
        mkdir -p $HOME/.termux/boot
        cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF
        cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF
        chmod +x $HOME/.termux/boot/*.sh
        echo "Root bypass setup complete."
    else
        echo "Root user detected. No root bypass needed."
    fi
}

# Function to alter Termux display to show Kali OS and architecture (32-bit or 64-bit)
alter_termux_display_kali() {
    local arch
    arch=$(uname -m)
    if [ -d "$HOME/kalifs-arm64" ] || [ -d "$HOME/kalifs-armhf" ]; then
        if [[ "$arch" == *"armv7"* || "$arch" == *"armhf"* || "$arch" == *"i686"* ]]; then
            echo "Kali Linux detected in Termux. Altering display to 32-bit..."
            echo "Welcome to Kali Linux 32-bit (via Termux)" > $HOME/.termux/motd
        else
            echo "Kali Linux detected in Termux. Altering display to 64-bit..."
            echo "Welcome to Kali Linux 64-bit (via Termux)" > $HOME/.termux/motd
        fi
    fi
}

# Helper function for safe git clone with error handling
safe_git_clone() {
    local repo_url="$1"
    local dest_dir="$2"
    if [ -d "$dest_dir" ]; then
        echo "Directory $dest_dir already exists, skipping clone."
    else
        git clone --depth 1 "$repo_url" "$dest_dir"
        if [ $? -ne 0 ]; then
            echo "Error cloning $repo_url to $dest_dir. Check your network or storage space."
        else
            echo "Cloned $repo_url to $dest_dir."
        fi
    fi
}

# Helper function for safe pip install
safe_pip_install() {
    pip install "$1"
    if [ $? -ne 0 ]; then
        echo "Error installing Python package: $1"
    else
        echo "Python package $1 installed."
    fi
}

# Helper function for safe gem install
safe_gem_install() {
    gem install "$1"
    if [ $? -ne 0 ]; then
        echo "Error installing Ruby gem: $1"
    else
        echo "Ruby gem $1 installed."
    fi
}

# Function to install more exploits, tools, and gems with error handling
install_more_exploits_tools_gems() {
    echo "Installing more exploits, tools, and gems with improved error handling..."

    # Exploits & tools
    pkg install git python ruby -y

    safe_git_clone https://github.com/vanhauser-thc/thc-hydra.git $HOME/thc-hydra
    safe_git_clone https://github.com/DanMcInerney/packet-sender.git $HOME/packet-sender
    safe_git_clone https://github.com/m4ll0k/WAScan.git $HOME/WAScan
    safe_git_clone https://github.com/sqlmapproject/sqlmap.git $HOME/sqlmap
    safe_git_clone https://github.com/PowerShellMafia/PowerSploit.git $HOME/PowerSploit
    safe_git_clone https://github.com/1N3/enum4linux.git $HOME/enum4linux
    safe_git_clone https://github.com/Greenwolf/ntlm_theft.git $HOME/ntlm_theft
    safe_git_clone https://github.com/byt3bl33d3r/CrackMapExec.git $HOME/CrackMapExec

    # Python tools
    safe_pip_install wafw00f
    safe_pip_install shodan
    safe_pip_install theHarvester
    safe_pip_install impacket

    # Ruby gems
    safe_gem_install bundler
    safe_gem_install msfrpc-client
    safe_gem_install snmp
    safe_gem_install net-ssh
    safe_gem_install net-scp
    safe_gem_install sinatra
    safe_gem_install httparty

    echo "Checking and fixing display issues..."
    if [ ! -d "$HOME/.termux" ]; then
        mkdir -p "$HOME/.termux"
    fi
    if [ ! -f "$HOME/.termux/motd" ]; then
        echo "Welcome to your enhanced Termux environment!" > "$HOME/.termux/motd"
    fi

    echo "If you experience issues, try running: termux-reload-settings"
    echo "If a tool fails to run, check for missing dependencies and rerun the installer."
    echo "Installation and setup complete with improved error handling."
}

# Function to display available commands
show_commands() {
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Available Commands:"
    echo "  show_commands                - Display this command list"
    echo "  get_user_info                - Show Termux user info"
    echo "  display_environment          - Show VM/environment info"
    echo "  display_config               - Show installer config"
    echo "  auto_setup_root_bypass       - Setup root bypass if needed"
    echo "  alter_termux_display_kali    - Show Kali OS in Termux MOTD"
    echo "  setup_test_environment       - Setup secondary test environment"
    echo "  install_exploit_tools        - Install extra exploit tools"
    echo "  install_security_gems        - Install extra Ruby security gems"
    echo "  install_superuser_tools      - Install superuser/rooting tools"
    echo "  mk_user_rootsuperuser        - Create root superuser environment"
    echo "  ensure_rootsuperuser_access  - Test and ensure root/superuser access"
    echo "  auto_configure_advanced_user - Auto-configure user and grant advanced access"
    echo "  install_web_tools            - Install web security tools"
    echo "  install_android_tools        - Install Android/mobile security tools"
    echo "  install_password_crackers    - Install password cracking tools"
    echo "  install_network_tools        - Install network analysis tools"
    echo "  install_fuzzing_tools        - Install fuzzing tools"
    echo "  install_enum_tools           - Install enumeration tools"
    echo "  install_extra_gems           - Install more Ruby gems"
    echo "  install_more_exploits_tools_gems - Install more exploits, tools, and gems with error handling"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to install extra exploit tools
install_exploit_tools() {
    echo "Installing ExploitDB SearchSploit..."
    pkg install git -y && git clone https://github.com/offensive-security/exploitdb.git && cd exploitdb && git clone https://github.com/offensive-security/searchsploit.git
    echo "Installing sqlninja (SQL Server exploit)..."
    pkg install git -y && git clone https://github.com/xxgrunge/sqlninja.git
    echo "Installing Routersploit (exploit framework)..."
    pkg install git python -y && git clone https://github.com/threat9/routersploit.git && cd routersploit && pip install -r requirements.txt
    echo "Installing Commix (Automated Command Injection)..."
    pkg install git python -y && git clone https://github.com/commixproject/commix.git
    echo "Installing BeEF XSS Framework..."
    pkg install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
    echo "Installing Zphisher (Phishing toolkit)..."
    pkg install git php openssh -y && git clone https://github.com/htr-tech/zphisher.git
    echo "Exploit tools installation complete."
}

# Function to install extra Ruby security gems
install_security_gems() {
    echo "Installing Metasploit Community Gems..."
    pkg install ruby -y && gem install rex msfrpc-client metasploit_data_models
    echo "Installing Wpscan (WordPress vulnerability scanner)..."
    pkg install ruby -y && gem install wpscan
    echo "Installing Arachni (web app security scanner)..."
    pkg install ruby -y && gem install arachni
    echo "Installing Nokogiri (Ruby gem for parsing HTML/XML)..."
    pkg install ruby -y && gem install nokogiri
    echo "Ruby security gems installation complete."
}

# Function to install superuser/rooting tools for Termux
install_superuser_tools() {
    echo "Installing Termux superuser/rooting tools..."

    # Install tsu (Termux su wrapper)
    pkg install tsu -y

    # Install Termux Sudo
    pkg install git ncurses-utils -y
    git clone https://gitlab.com/st42/termux-sudo.git $HOME/termux-sudo
    cp $HOME/termux-sudo/sudo /data/data/com.termux/files/usr/bin/sudo
    chmod 700 /data/data/com.termux/files/usr/bin/sudo

    # Install suroot (Termux SU)
    git clone https://github.com/MasterDevX/Termux-SU $HOME/Termux-SU
    bash $HOME/Termux-SU/install.sh

    # Install MagiskHide Props Config (root bypass)
    git clone https://github.com/Magisk-Modules-Repo/MagiskHide-Props-Config.git $HOME/MagiskHide-Props-Config

    # Install BusyBox
    pkg install busybox -y

    echo "Superuser/rooting tools installation complete."
}

# Function to create a root superuser in Termux
mk_user_rootsuperuser() {
    local ROOT_USER="rootsuperuser"
    local ROOT_HOME="$HOME/.rootsuperuser"
    local ROOT_ID=0

    echo "Creating directory for root superuser at $ROOT_HOME..."
    mkdir -p "$ROOT_HOME"

    # Create a script to simulate root user environment
    cat > "$ROOT_HOME/start_rootsuperuser.sh" <<EOF
#!/data/data/com.termux/files/usr/bin/bash
echo "Switched to root superuser environment."
export HOME="$ROOT_HOME"
export USER="$ROOT_USER"
export UID=$ROOT_ID
export PS1="# "
cd \$HOME
bash --login
EOF
    chmod +x "$ROOT_HOME/start_rootsuperuser.sh"
    echo "Root superuser environment script created at $ROOT_HOME/start_rootsuperuser.sh"
}

# Function to test and ensure root/superuser access in Termux
ensure_rootsuperuser_access() {
    echo "Testing for root/superuser access in Termux..."
    if [ "$(id -u)" = "0" ]; then
        echo "Already running as root."
    else
        echo "Not running as root. Attempting to gain root access using tsu or sudo..."
        if command -v tsu >/dev/null 2>&1; then
            tsu -c "id" && echo "Root access granted via tsu." && return
        fi
        if command -v sudo >/dev/null 2>&1; then
            sudo id && echo "Root access granted via sudo." && return
        fi
        echo "Root access not available. Setting up root bypass (proot/fake root)..."
        auto_setup_root_bypass
        echo "If you need advanced access, run: bash \$HOME/.rootsuperuser/start_rootsuperuser.sh"
    fi
}

# Function to automatically configure user and grant advanced access if needed
auto_configure_advanced_user() {
    local USER_ID
    USER_ID=$(id -u)
    if [ "$USER_ID" != "0" ]; then
        echo "Non-root user detected (UID: $USER_ID)."
        ensure_rootsuperuser_access
    else
        echo "User is already root (UID: 0)."
    fi
}

# Function to install CSS, CVS, and CTX tools
install_css_cvs_ctx_tools() {
    echo "Installing CSS, CVS, and CTX related tools..."

    # CSS: Cascading Style Sheets security tools (example: cssmin for minification, stylelint for linting)
    echo "Installing stylelint (CSS linter)..."
    pkg install nodejs -y
    npm install -g stylelint
    if [ $? -eq 0 ]; then
        echo "stylelint installed successfully."
    else
        echo "Error installing stylelint."
    fi

    # CVS: Concurrent Versions System (version control)
    echo "Installing CVS..."
    pkg install cvs -y
    if [ $? -eq 0 ]; then
        echo "CVS installed successfully."
    else
        echo "Error installing CVS."
    fi

    # CTX: Context tools (example: jq for JSON context, xmlstarlet for XML context)
    echo "Installing jq (JSON context processor)..."
    pkg install jq -y
    if [ $? -eq 0 ]; then
        echo "jq installed successfully."
    else
        echo "Error installing jq."
    fi

    echo "Installing xmlstarlet (XML context processor)..."
    pkg install xmlstarlet -y
    if [ $? -eq 0 ]; then
        echo "xmlstarlet installed successfully."
    else
        echo "Error installing xmlstarlet."
    fi

    echo "CSS, CVS, and CTX tools installation complete."

    # Optional: Show versions
    stylelint --version 2>/dev/null || echo "stylelint not found"
    cvs --version 2>/dev/null || echo "cvs not found"
    jq --version 2>/dev/null || echo "jq not found"
    xmlstarlet --version 2>/dev/null || echo "xmlstarlet not found"
}

# Execute the main setup functions
get_user_info
display_environment
display_config
auto_setup_root_bypass
alter_termux_display_kali

echo "====================================="
echo "Termux Security Tool Installer"
echo "====================================="
echo ""

echo "Updating package lists..."
pkg update -y
echo ""

echo "Setting up environment for root tools..."
pkg install proot -y

echo "Setting up PRoot..."
mkdir -p $HOME/.termux/boot
cat > $HOME/.termux/boot/proot_startup.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
proot --link2symlink -0 -l -p -L -H $HOME/.termux/boot/fake_root_shell.sh
EOF

cat > $HOME/.termux/boot/fake_root_shell.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash
echo "PRoot is active - fake root environment enabled"
export PATH=$PATH:/system/bin:/system/xbin
export LD_LIBRARY_PATH=/system/lib
alias su="echo Already root!"
PS1="# "
$@
EOF

chmod +x $HOME/.termux/boot/*.sh
echo "PRoot setup complete."
echo ""

# Installing selected tools
echo "Installing Nmap..."
pkg install nmap -y
if [ $? -eq 0 ]; then
    echo "Nmap installed successfully."
else
    echo "Error installing Nmap."
fi
echo ""

echo "Installing Metasploit Framework..."
pkg install unstable-repo -y && pkg install metasploit -y
if [ $? -eq 0 ]; then
    echo "Metasploit Framework installed successfully."
else
    echo "Error installing Metasploit Framework."
fi
echo ""

echo "Installing THC Hydra..."
pkg install hydra -y
if [ $? -eq 0 ]; then
    echo "THC Hydra installed successfully."
else
    echo "Error installing THC Hydra."
fi
echo ""

echo "Installing Aircrack-ng..."
pkg install root-repo -y && pkg install aircrack-ng -y
if [ $? -eq 0 ]; then
    echo "Aircrack-ng installed successfully."
else
    echo "Error installing Aircrack-ng."
fi
echo ""

echo "Installing Wireshark (TShark)..."
pkg install tshark -y
if [ $? -eq 0 ]; then
    echo "Wireshark (TShark) installed successfully."
else
    echo "Error installing Wireshark (TShark)."
fi
echo ""

echo "Installing SQLMap..."
pkg install python -y && pip install sqlmap
if [ $? -eq 0 ]; then
    echo "SQLMap installed successfully."
else
    echo "Error installing SQLMap."
fi
echo ""

echo "Installing Kali NetHunter..."
pkg install wget -y && wget -O install-nethunter-termux https://offs.ec/2MceZWr && chmod +x install-nethunter-termux && ./install-nethunter-termux
if [ $? -eq 0 ]; then
    echo "Kali NetHunter installed successfully."
else
    echo "Error installing Kali NetHunter."
fi
echo ""

echo "Installing Hashcat..."
pkg install hashcat -y
if [ $? -eq 0 ]; then
    echo "Hashcat installed successfully."
else
    echo "Error installing Hashcat."
fi
echo ""

echo "Installing John the Ripper..."
pkg install john -y
if [ $? -eq 0 ]; then
    echo "John the Ripper installed successfully."
else
    echo "Error installing John the Ripper."
fi
echo ""

echo "Installing Crunch..."
pkg install crunch -y
if [ $? -eq 0 ]; then
    echo "Crunch installed successfully."
else
    echo "Error installing Crunch."
fi
echo ""

echo "Installing Medusa..."
pkg install medusa -y
if [ $? -eq 0 ]; then
    echo "Medusa installed successfully."
else
    echo "Error installing Medusa."
fi
echo ""

echo "Installing Kraken..."
pkg install git python -y && git clone https://github.com/Kraken-Project/Kraken.git && cd Kraken && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Kraken installed successfully."
else
    echo "Error installing Kraken."
fi
echo ""

echo "Installing Wifite..."
pkg install git python -y && git clone https://github.com/derv82/wifite2.git && cd wifite2 && pip install -r requirements.txt
if [ $? -eq 0 ]; then
    echo "Wifite installed successfully."
else
    echo "Error installing Wifite."
fi
echo ""

echo "Installing Bettercap..."
pkg install bettercap -y
if [ $? -eq 0 ]; then
    echo "Bettercap installed successfully."
else
    echo "Error installing Bettercap."
fi
echo ""

echo "Installing Nikto..."
pkg install perl -y && cpan install Net::SSLeay && git clone https://github.com/sullo/nikto.git
if [ $? -eq 0 ]; then
    echo "Nikto installed successfully."
else
    echo "Error installing Nikto."
fi
echo ""

echo "Installing DIRB..."
pkg install dirb -y
if [ $? -eq 0 ]; then
    echo "DIRB installed successfully."
else
    echo "Error installing DIRB."
fi
echo ""

echo "Installing Slowloris..."
pkg install git python -y && git clone https://github.com/gkbrk/slowloris.git
if [ $? -eq 0 ]; then
    echo "Slowloris installed successfully."
else
    echo "Error installing Slowloris."
fi
echo ""

echo "Installing BeEF XSS Framework..."
pkg install git ruby -y && git clone https://github.com/beefproject/beef.git && cd beef && bundle install
if [ $? -eq 0 ]; then
    echo "BeEF XSS Framework installed successfully."
else
    echo "Error installing BeEF XSS Framework."
fi
echo ""

echo "Installing Commix..."
pkg install git python -y && git clone https://github.com/commixproject/commix.git
if [ $? -eq 0 ]; then
    echo "Commix installed successfully."
else
    echo "Error installing Commix."
fi
echo ""

echo "All selected tools installed. Run 'show_commands' for more options."

# Function to install CSS, CVS, and CTX tools
install_css_cvs_ctx_tools() {
    echo "Installing CSS, CVS, and CTX related tools..."

    # CSS: Cascading Style Sheets security tools (example: cssmin for minification, stylelint for linting)
    echo "Installing stylelint (CSS linter)..."
    pkg install nodejs -y
    npm install -g stylelint
    if [ $? -eq 0 ]; then
        echo "stylelint installed successfully."
    else
        echo "Error installing stylelint."
    fi

    # CVS: Concurrent Versions System (version control)
    echo "Installing CVS..."
    pkg install cvs -y
    if [ $? -eq 0 ]; then
        echo "CVS installed successfully."
    else
        echo "Error installing CVS."
    fi

    # CTX: Context tools (example: jq for JSON context, xmlstarlet for XML context)
    echo "Installing jq (JSON context processor)..."
    pkg install jq -y
    if [ $? -eq 0 ]; then
        echo "jq installed successfully."
    else
        echo "Error installing jq."
    fi

    echo "Installing xmlstarlet (XML context processor)..."
    pkg install xmlstarlet -y
    if [ $? -eq 0 ]; then
        echo "xmlstarlet installed successfully."
    else
        echo "Error installing xmlstarlet."
    fi

    echo "CSS, CVS, and CTX tools installation complete."

    # Optional: Show versions
    stylelint --version 2>/dev/null || echo "stylelint not found"
    cvs --version 2>/dev/null || echo "cvs not found"
    jq --version 2>/dev/null || echo "jq not found"
    xmlstarlet --version 2>/dev/null || echo "xmlstarlet not found"
}

# Call the function in your main execution block if you want it to run by default:
install_css_cvs_ctx_tools

chmod +x "root security tool installer"
./root\ security\ tool\ installer

stylelint --version
cvs --version
jq --version
xmlstarlet --version
